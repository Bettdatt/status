version: 2.1
orbs:
  win: circleci/windows@2
  slack: circleci/slack@3.4.2
  jq: circleci/jq@2

jobs:
  test-macos-installation:
    parameters:
        method:
          description: installation method
          type: enum
          enum: ['tarball', 'npm', 'installer']
        cli:
          description: cli to test
          type: enum
          enum: ['sf', 'sfdx']
    macos:
      xcode: 12.5.1
    steps:
      - jq/install
      - attach_workspace:
          at: /tmp/workspace
      - run: npm install -g @salesforce/plugin-release-management@test
      - run:
          name: 'Test installation on macos'
          command: |
            results=$(sf-release cli:install:test --cli << parameters.cli >> --method << parameters.method >> --json)
            echo $results | jq .
            status_num=$(echo $results | jq .status)
            [[ $status_num = 0 ]] && status="Passed" || status="Failed"
            echo -e "$status [macos/<< parameters.cli >>/<< parameters.method >> - $CIRCLE_BUILD_URL]" >> /tmp/workspace/macos.<< parameters.cli >>.<< parameters.method >>.results.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - macos.<< parameters.cli >>.<< parameters.method >>.results.txt

  test-windows-installation:
    parameters:
      method:
        description: installation method
        type: enum
        enum: ['tarball', 'npm', 'installer']
      cli:
        description: cli to test
        type: enum
        enum: ['sf', 'sfdx']
    executor:
      name: win/default
      size: xlarge
    steps:
      - attach_workspace:
          at: C:\tmp\workspace\
      - run: npm install -g @salesforce/plugin-release-management@test
      - run:
          name: 'Test installation on windows'
          command: |
            $result = sf-release cli:install:test --cli << parameters.cli >> --method << parameters.method >> --json | ConvertFrom-Json
            echo $result | ConvertTo-Json
            $status = if ($result.status -eq 0) { "Passed" } else { "Failed" }
            Add-Content -Path C:\tmp\workspace\windows.<< parameters.cli >>.<< parameters.method >>.results.txt -Value "$status [windows/<< parameters.cli >>/<< parameters.method >> - $env:CIRCLE_BUILD_URL]" -PassThru
      - persist_to_workspace:
          root: C:\tmp\workspace\
          paths:
            - ./windows.<< parameters.cli >>.<< parameters.method >>.results.txt

  test-linux-installation:
    parameters:
      method:
        description: installation method
        type: enum
        enum: ['tarball', 'npm', 'installer']
      cli:
        description: cli to test
        type: enum
        enum: ['sf', 'sfdx']
    docker:
      - image: node:lts
    steps:
      - jq/install
      - attach_workspace:
          at: /tmp/workspace
      - run: npm install -g @salesforce/plugin-release-management@test
      - run:
          name: 'Test installation on linux'
          command: |
            results=$(sf-release cli:install:test --cli << parameters.cli >> --method << parameters.method >> --json)
            echo $results | jq .
            status_num=$(echo $results | jq .status)
            [[ $status_num = 0 ]] && status="Passed" || status="Failed"
            echo -e "$status [linux/<< parameters.cli >>/<< parameters.method >> - $CIRCLE_BUILD_URL]" >> /tmp/workspace/linux.<< parameters.cli >>.<< parameters.method >>.results.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - linux.<< parameters.cli >>.<< parameters.method >>.results.txt

  examine-results:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Search for test failures
          command: |
            successes=$(sed -n -e '/^Passed/p' /tmp/workspace/*)
            echo "Successes:"
            echo "$successes"

            failures=$(sed -n -e '/^Failed/p' /tmp/workspace/*)
            echo "Failures:"
            echo "$failures"

            if [[ ! -z "$failures" ]]; then
              exit 1
            fi;
      - slack/status:
          channel: 'cli-team-alerts'
          fail_only: true
          failure_message: 'CLI installation test failed. See examine-results job for more info.'

workflows:
  version: 2
  installation-test:
    triggers:
      - schedule:
          # Everyday at 10am Mountain Time
          cron: 0 16 * * *
          filters:
            branches:
              only:
                - main
    jobs:
      - test-macos-installation:
          name: test-macos-sf-installer
          cli: sf
          method: installer
      - test-macos-installation:
          name: test-macos-sfdx-installer
          cli: sfdx
          method: installer
      - test-macos-installation:
          name: test-macos-sf-npm
          cli: sf
          method: npm
      - test-macos-installation:
          name: test-macos-sfdx-npm
          cli: sfdx
          method: npm
      - test-macos-installation:
          name: test-macos-sf-tarball
          cli: sf
          method: tarball
      - test-macos-installation:
          name: test-macos-sfdx-tarball
          cli: sfdx
          method: tarball

      - test-windows-installation:
          name: test-windows-sf-installer
          cli: sf
          method: installer
      - test-windows-installation:
          name: test-windows-sfdx-installer
          cli: sfdx
          method: installer
      - test-windows-installation:
          name: test-windows-sf-npm
          cli: sf
          method: npm
      - test-windows-installation:
          name: test-windows-sfdx-npm
          cli: sfdx
          method: npm
      - test-windows-installation:
          name: test-windows-sf-tarball
          cli: sf
          method: tarball
      # - test-windows-installation:
      #     name: test-windows-sfdx-tarball
      #     cli: sfdx
      #     method: tarball

      - test-linux-installation:
          name: test-linux-sf-npm
          cli: sf
          method: npm
      - test-linux-installation:
          name: test-linux-sfdx-npm
          cli: sfdx
          method: npm
      - test-linux-installation:
          name: test-linux-sf-tarball
          cli: sf
          method: tarball
      - test-linux-installation:
          name: test-linux-sfdx-tarball
          cli: sfdx
          method: tarball

      - examine-results:
          requires:
            - test-macos-sf-installer
            - test-macos-sfdx-installer
            - test-macos-sf-tarball
            - test-macos-sfdx-tarball
            - test-macos-sf-npm
            - test-macos-sfdx-npm
            - test-windows-sf-installer
            - test-windows-sfdx-installer
            - test-windows-sf-tarball
            # - test-windows-sfdx-tarball
            - test-windows-sf-npm
            - test-windows-sfdx-npm
            - test-linux-sf-tarball
            - test-linux-sfdx-tarball
            - test-linux-sf-npm
            - test-linux-sfdx-npm
